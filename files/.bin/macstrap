#!/usr/bin/env bash

# Usage: macstrap [-F] [-U] [-H]
#   default: run checks"
#   -F: fix anything that is fixable
#   -U: update macstrap & other tools to latest version
#   -H: output this help message

# Surrounding in brackets ensures that the whole script gets loaded to memory
# before running which allows us to update the script from the script without
# issue.
{
set -eu -o pipefail

# Let's make some pretty stuff
COLOR_RESET="$(tput sgr0)"
COLOR_BLACK="$(tput setaf 0)"
COLOR_RED="$(tput setaf 1)"
COLOR_GREEN="$(tput setaf 2)"
COLOR_YELLOW="$(tput setaf 3)"
COLOR_BLUE="$(tput setaf 4)"
COLOR_MAGENTA="$(tput setaf 5)"
COLOR_CYAN="$(tput setaf 6)"
COLOR_WHITE="$(tput setaf 7)"
TEXT_BOLD="$(tput bold)"
SYMBOL_TICK="✔"
SYMBOL_CROSS="✖"
SYMBOL_WARN="⚠"
SYMBOL_DEBUG="⚲"
SYMBOL_INFO="ⓘ"

log_debug() {
    if [ ${DEBUG:-0} -eq 1 ]; then
        echo "${COLOR_RESET}${SYMBOL_DEBUG} $@ ${COLOR_RESET}"
    fi
}

log_info() {
    echo "${COLOR_CYAN}${SYMBOL_INFO} $@ ${COLOR_RESET}"
}

log_ok() {
    echo "${COLOR_GREEN}${SYMBOL_TICK} $@ ${COLOR_RESET}"
}

log_warn() {
    echo "${COLOR_YELLOW}${SYMBOL_WARN} $@ ${COLOR_RESET}"
}

log_err() {
    echo "${TEXT_BOLD}${COLOR_RED}${SYMBOL_CROSS} $@ ${COLOR_RESET}"
}

# Global mode flags, set by options passed in
FIX=0
UP=0

detect_profile() {
    local DETECTED_PROFILE
    DETECTED_PROFILE=''
    local SHELLTYPE
    SHELLTYPE="$(basename "/$SHELL")"

    if [ "$SHELLTYPE" = "bash" ]; then
        if [ -f "$HOME/.bashrc" ]; then
            DETECTED_PROFILE="$HOME/.bashrc"
        elif [ -f "$HOME/.bash_profile" ]; then
            DETECTED_PROFILE="$HOME/.bash_profile"
        fi
    elif [ "$SHELLTYPE" = "zsh" ]; then
        DETECTED_PROFILE="$HOME/.zshrc"
    fi

    if [ ! -z "$DETECTED_PROFILE" ]; then
        echo "$DETECTED_PROFILE"
    fi
}

system_info() {
    log_info "=== SYSTEM INFO ==="
    log_info "OS: $(sw_vers -productVersion)"
    log_info "\$HOME: $HOME"
    log_info "\$EDITOR: $EDITOR"
    log_info "\$SHELL: $SHELL"
    log_info "Profile: $(detect_profile)"
}

mac_has() {
  type "$1" > /dev/null 2>&1
}

check_xcode(){
    if ! mac_has xcode-select; then
        log_err "Xcode is not installed"
    else
        log_ok "Xcode is installed"
    fi
    log_info "Run xcode-select --install to ensure Xcode is up-to-date"
}

macstrap_check() {
    check_xcode
}

macstrap_usage(){
    echo "Usage: macstrap [-V] [-F] [-U] [-H]"
    echo "   default: run checks"
    echo "   -F: Run automated env fixes & updates"
    echo "   -U: update macstrap and other tools to latest version"
    echo "   -V: verbose mode - output extra info"
    echo "   -H: output this help message"
    echo ""
    echo "Try running 'macstrap' to check your install"
    exit 0
}

macstrap_main() {
    # Start by processing arguments, to see what mode we are in
    # Ref: http://mywiki.wooledge.org/BashFAQ/035#Manual_loop
    while :; do
        case $1 in
            -h|-H|-\?|--help|-help|help)
                macstrap_usage
                ;;
            -V|--verbose)
                DEBUG=1
                ;;
            -U|--up|--upgrade|up|-u)
                export UP=1
                log_info "Updating macstrap & other tools..."
                curl -o- https://devopsmakers.github.io/macstrap/install.sh | bash
                log_ok "Update succeeded"
                ;;
            -F|--fix|fix|-f)
                FIX=1
                ;;
            -?*)
                log_err "Invalid option: $1"
                macstrap_usage
                ;;
            *)  # Default case: No more options, so break out of the loop.
                break
        esac

        shift
    done

    macstrap_check
    shell_reset
}

shell_reset() {
    unset -f log_debug log_info log_ok log_warn log_err shell_reset \
        macstrap_main macstrap_check macstrap_usage
}

macstrap_main "$@"
}
